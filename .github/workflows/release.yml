#
# This script will tag the repo, compile and zip our software, and publish it as a GitHub Release
#
# see: https://github.com/marketplace/actions/publish-release
#
# Calling other workflows from this workflow:
#  https://docs.github.com/en/actions/learn-github-actions/reusing-workflows

name: 'Release Test'
on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Release Version Tag'
        required: true
        default: '2022.4.15'
        #default: `grep -o 'VERSION "[^"]*' CMakeLists.txt  | grep -o '[^"]*$'`
#      create-release-page:
#        type: boolean
#        description: Create Release Page
#        default: 'true'
      build-macos:
        type: boolean
        description: Build macOS Universal FLTK
        default: 'true'
      build-linux:
        type: boolean
        description: Build Linux i386 FLTK
        default: 'true'
      build-windows:
        type: boolean
        description: Build Windows x64 FLTK
        default: 'true'

jobs:

#  create-release-page:
#    runs-on: ubuntu-latest
#    if: ${{ github.event.inputs.create-release-page == 'true' }}
#    steps:
#    - name: Create Release
#      id: create_release
#      uses: actions/create-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        tag_name: ${{ github.event.inputs.version_tag }}
#        release_name: "Version ${{ github.event.inputs.version_tag }}"
#        draft: false
#        prerelease: false
#    - name: Publish Release
#      uses: eregon/publish-release@v1
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#      with:
#        release_id: ${{ steps.create_release.outputs.id }}

  build-macos:
    runs-on: macos-latest
    if: ${{ github.event.inputs.build-macos == 'true' }}
    steps:
    - name: Get Version
      run: |
        grep -o 'VERSION "[^"]*' CMakeLists.txt  | grep -o '[^"]*$' >> $RELEASE_TAG
    - name: Get sources
      uses: actions/checkout@v2
    - name: Compile Einstein
      run: |
        cmake -S . -B build \
                      -D CMAKE_BUILD_TYPE=Release \
                      -D "CMAKE_OSX_ARCHITECTURES=arm64;x86_64"
        cmake --build build
    - name: Pack Einstein
      run: |
        mv build/spot .
        cmake -E tar cf spot_macos.zip --format=zip spot
    - uses: ncipollo/release-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        allowUpdates: 'true'
        artifacts: 'spot_macos.zip'
        artifactContentType: application/zip
        body: testing
        # tag: 'v${{ github.event.inputs.version_tag }}'
        tag: $RELEASE_TAG
        token: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    runs-on: macos-latest
    if: ${{ github.event.inputs.build-linux == 'true' }}
    steps:
    - name: Get sources
      uses: actions/checkout@v2
    - name: Compile Einstein
      run: |
        cmake -S . -B build \
                      -D CMAKE_BUILD_TYPE=Release
        cmake --build build
    - name: Pack Einstein
      run: |
        mv build/spot .
        cmake -E tar cf spot_linux.zip --format=zip spot
    - uses: ncipollo/release-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        allowUpdates: 'true'
        artifacts: 'spot_linux.zip'
        artifactContentType: application/zip
        body: testing
        tag: 'v${{ github.event.inputs.version_tag }}'
        token: ${{ secrets.GITHUB_TOKEN }}

  build-windows:
    runs-on: windows-latest
    if: ${{ github.event.inputs.build-windows == 'true' }}
    steps:
    - name: Get sources
      uses: actions/checkout@v2
    - name: Compile Einstein
      run: |
        cmake -G "Visual Studio 16 2019" -S . -B build
        cmake --build build --config Release
    - name: Pack Einstein
      run: |
        mv build/Release/spot.exe .
        cmake -E tar cf spot_windows.zip --format=zip spot.exe
    - uses: ncipollo/release-action@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        allowUpdates: 'true'
        # prerelease:
        # draft:
        # bodyFile:
        artifacts: 'spot_windows.zip'
        artifactContentType: application/zip
        body: testing
        tag: 'v${{ github.event.inputs.version_tag }}'
        token: ${{ secrets.GITHUB_TOKEN }}

